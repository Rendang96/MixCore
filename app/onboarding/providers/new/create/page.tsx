"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { PageHeader } from "@/components/page-header"
import { toast } from "@/hooks/use-toast"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { ArrowLeft } from "lucide-react"

export default function CreateOnboardingProviderPage() {
  const router = useRouter()
  const [isSubmitting, setIsSubmitting] = useState(false)
  // Initialize form data as empty
  const [formData, setFormData] = useState({
    name: "",
    providerType: "",
    providerName: "",
    tinNumber: "",
    email: "",
    phoneNumber: "",
    state: "",
    notes: "",
  })

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleSelectChange = (name: string, value: string) => {
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)

    try {
      // Generate a unique application code
      const applicationCode = `OB-${new Date().getFullYear()}-${Math.floor(1000 + Math.random() * 9000)}`

      // Create the provider data object
      const providerData = {
        id: String(Date.now()), // Generate a unique ID
        applicationCode,
        name: formData.name,
        companyName: formData.providerName,
        tinNumber: formData.tinNumber,
        email: formData.email,
        phoneNumber: formData.phoneNumber,
        state: formData.state,
        providerType: formData.providerType,
        status: "filling", // Set status to "Provider Filling Form"
        createdAt: new Date().toISOString().split("T")[0], // Current date in YYYY-MM-DD format
        notes: formData.notes,
      }

      // In a real application, you would save this to your database
      // For example:
      // const response = await fetch('/api/onboarding/providers', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify(providerData)
      // })
      // if (!response.ok) throw new Error('Failed to create provider')

      // Simulate API call to create provider
      await new Promise((resolve) => setTimeout(resolve, 1000))

      toast({
        title: "Provider Created",
        description:
          "The provider has been successfully created and added to Active Onboarding with 'Provider Filling Form' status.",
      })

      // Redirect to the providers list
      router.push("/onboarding/providers")
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to create provider. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <PageHeader title="Create New Provider" description="Add a new provider to the onboarding process" />
        <Button variant="outline" asChild>
          <Link href="/onboarding/providers">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to List
          </Link>
        </Button>
      </div>

      <form onSubmit={handleSubmit}>
        <Card>
          <CardHeader>
            <CardTitle>Provider Details</CardTitle>
            <CardDescription>Enter the basic information for this provider.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-2">
                <Label htmlFor="applicationCode">Application Code</Label>
                <Input id="applicationCode" placeholder="OB-2023-001" disabled value="Auto-generated by the system" />
                <p className="text-sm text-muted-foreground">Auto-generated by the system</p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="name">Name</Label>
                <Input
                  id="name"
                  name="name"
                  placeholder="John Smith"
                  value={formData.name}
                  onChange={handleChange}
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="providerType">Provider Type</Label>
                <Select
                  value={formData.providerType}
                  onValueChange={(value) => handleSelectChange("providerType", value)}
                  required
                >
                  <SelectTrigger id="providerType">
                    <SelectValue placeholder="Select provider type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Medical">Medical</SelectItem>
                    <SelectItem value="Dental">Dental</SelectItem>
                    <SelectItem value="Wellness">Wellness</SelectItem>
                    <SelectItem value="Specialist">Specialist</SelectItem>
                    <SelectItem value="Hospital">Hospital</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="providerName">Provider Name</Label>
                <Input
                  id="providerName"
                  name="providerName"
                  placeholder="ABC Medical Center"
                  value={formData.providerName}
                  onChange={handleChange}
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="tinNumber">TIN Number</Label>
                <Input
                  id="tinNumber"
                  name="tinNumber"
                  placeholder="123456789"
                  value={formData.tinNumber}
                  onChange={handleChange}
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  name="email"
                  type="email"
                  placeholder="john@abcmedical.com"
                  value={formData.email}
                  onChange={handleChange}
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="phoneNumber">Phone Number</Label>
                <Input
                  id="phoneNumber"
                  name="phoneNumber"
                  placeholder="012-3456789"
                  value={formData.phoneNumber}
                  onChange={handleChange}
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="state">State</Label>
                <Select value={formData.state} onValueChange={(value) => handleSelectChange("state", value)} required>
                  <SelectTrigger id="state">
                    <SelectValue placeholder="Select state" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Kuala Lumpur">Kuala Lumpur</SelectItem>
                    <SelectItem value="Selangor">Selangor</SelectItem>
                    <SelectItem value="Penang">Penang</SelectItem>
                    <SelectItem value="Johor">Johor</SelectItem>
                    <SelectItem value="Sabah">Sabah</SelectItem>
                    <SelectItem value="Sarawak">Sarawak</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="status">Status</Label>
                <Input id="status" placeholder="Provider Filling Form" disabled value="Provider Filling Form" />
                <p className="text-sm text-muted-foreground">Status is automatically set to "Provider Filling Form"</p>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="notes">Notes</Label>
              <Textarea
                id="notes"
                name="notes"
                placeholder="Provider has been contacted via email and is in the process of completing their registration."
                value={formData.notes}
                onChange={handleChange}
                className="min-h-[100px]"
              />
            </div>

            <div className="flex justify-end space-x-4">
              <Button variant="outline" type="button" asChild>
                <Link href="/onboarding/providers">Cancel</Link>
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? "Saving..." : "Create Provider"}
              </Button>
            </div>
          </CardContent>
        </Card>
      </form>
    </div>
  )
}
